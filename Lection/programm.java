public class programm {
    static public void main(String[] args) {
        // System.out.println("bye world");
        // short x = 10;
        // System.out.println(Integer.bitCount(x));

        // int a = 123;
        // a++;
        // System.out.println(a);

        // int a = 123;

        // System.out.println(a++);
        // System.out.println(a);
        // out = 123
        // 124
        // Это значит, что приоритет инкременте ниже чем приоритет вывода в консоль

        // Глупейший вопрос на интервью)
        // int a = 123;
        // a = a-- - --a;
        // System.out.println(a);

        // Операции сравнения
        // boolean f = 123 > 234;
        // System.out.println(f);

        // Побитовые операции (очень редко применимы)

        // int a = 8;
        // // 1000 (в бит версии (двоичный код)
        // // a = a << 1;
        // System.out.println(a << 1);
        // // 10000 мы все биты сдвинули влево - 16 в десятичной

        // int a = 18;
        // // 10010
        // // a = a << 1;
        // System.out.println(a >> 1);
        // // 1001 - 9

        // int a = 5;
        // int b = 2;
        // System.out.println(a | b);
        // // | значит что мы побитово сравниваем биты - 1 и 0 это 1, 0 и 1 это 1, 1 и 0
        // // это 0
        // // 101 (5 в двоичном представлении)
        // // 010 (5 в двоичном представлении)
        // // 111 (итог сравнения)

        // // & - побитовое и (1 и 0 это 0, 0 и 1 это 0)
        // int a = 5;
        // int b = 2;
        // System.out.println(a & b);
        // // 101
        // // 010
        // // 000

        // ^ српаведлево тогда, когда одно из является истинной, то есть тоже семерка
        // int a = 5;
        // int b = 2;
        // System.out.println(a & b);
        // // 101 (5 в двоичном представлении)
        // // 010 (5 в двоичном представлении)
        // // 111 7

    }
}
